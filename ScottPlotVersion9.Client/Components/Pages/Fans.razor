@page "/fans"
@rendermode InteractiveWebAssembly

@using ScottPlot
@using ScottPlot.AxisPanels
@using System.Globalization
@using ScottPlot.Blazor

<h1 style="text-align:center;">Fans</h1>
<BlazorPlot @ref="blazorPlot" Style="width: 800px; height: 500px;" />

@code {
    BlazorPlot blazorPlot = new();

    // double[] ysLeft = { 0, 155.350, 310.700, 466.050, 621.400 };
    // double[] ysLeft2 = { 0, 78, 155, 233, 310 };

    double[] ysLeft = new double[] { 0, 10.000, 20.000, 30.000 };
    double[] ysLeft2 = new double[] { 0, 50, 100, 150, 200 };


    private System.Threading.Timer? AddNewDataTimer;
    private System.Threading.Timer? UpdatePlotTimer;

    ScottPlot.Plottables.DataLogger? loggerFlow;
    ScottPlot.Plottables.DataLogger? loggerSpeed;

    readonly ScottPlot.DataGenerators.RandomWalker walkerFlow = new(2, multiplier: 1.000);
    readonly ScottPlot.DataGenerators.RandomWalker walkerSpeed = new(1, multiplier: 10);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var plt = blazorPlot.Plot;
            PlotTheme.ApplyDarkTheme(plt);

            // double[] xs = { 0, 500, 1000, 1500, 2000 };
            // double[] ysLeft = { 0, 155.350, 310.700, 466.050, 621.400 };
            // double[] ysLeft2 = { 0, 78, 155, 233, 310 };
            // var leftLine = plt.Add.Scatter(xs, ysLeft);

            // var yLeft2 = plt.Axes.AddLeftAxis();
            // var leftLine2 = plt.Add.Scatter(xs, ysLeft2);
            // leftLine2.Axes.YAxis = yLeft2;

            // ===== EJE Y IZQUIERDO (Flujo) =====

            LeftAxis yLeftFlow = (LeftAxis)plt.Axes.Left;
            yLeftFlow.LabelText = "Volumetricflow";
            yLeftFlow.LabelFontSize = 12;
            yLeftFlow.LabelFontColor = Colors.Green;
            yLeftFlow.MinimumSize = 80;
            yLeftFlow.TickGenerator = new ScottPlot.TickGenerators.NumericManual(positions: ysLeft,
            labels: ysLeft.Select(v => v == 0 ? "0" : v.ToString("N3", CultureInfo.InvariantCulture).Replace(",", ".")).ToArray());

            yLeftFlow.TickLabelStyle.ForeColor = Colors.Green;               // Color de las marcas del eje izquierdo
                                                                             // Color de los números del eje izquierdo
                                                                             // yLeft.Min = ysLeft.Min();
                                                                             // yLeft.Max = ysLeft.Max();



            // // ===== EJE Y SECUNDARIO INDEPENDIENTE (Velocidad) =====
            LeftAxis yRightSpeed = plt.Axes.AddLeftAxis();
            yRightSpeed.LabelText = "Massflow [tn/h]";
            yRightSpeed.LabelFontSize = 12;
            yRightSpeed.LabelFontColor = Colors.Violet;
            yRightSpeed.MinimumSize = 50;
            yRightSpeed.TickGenerator = new ScottPlot.TickGenerators.NumericManual(
            positions: ysLeft2,
            labels: ysLeft2.Select(v => v.ToString()).ToArray());
            yRightSpeed.TickLabelStyle.ForeColor = Colors.Violet;
            yRightSpeed.FrameLineStyle.IsVisible = false;

            // yLeft2.Min = ysLeft2.Min();
            // yLeft2.Max = ysLeft2.Max();

            // massLine.Axes.YAxis = yLeft2;

            // // ===== EJE X =====
            BottomAxis xAxis = (BottomAxis)plt.Axes.Bottom;
            xAxis.LabelText = "Time [minutes]";
            /*  xAxis.SetTicks(xs, xs.Select(v => v.ToString()).ToArray()) */
            ;
            // xAxis.Min = xs.Min();
            // xAxis.Max = xs.Max();
            xAxis.FrameLineStyle.IsVisible = true;
            xAxis.FrameLineStyle.Color = Colors.Black;
            xAxis.TickLabelStyle.ForeColor = Colors.White;
            plt.Axes.Right.IsVisible = true;

            // Líneas de los ejes visibles
            // yLeft.FrameLineStyle.IsVisible = true;
            // yLeft.FrameLineStyle.Color = Colors.Black;
            // yLeft2.FrameLineStyle.IsVisible = true;
            // yLeft2.FrameLineStyle.Color = Colors.Black;
            // xAxis.FrameLineStyle.IsVisible = true;
            // xAxis.FrameLineStyle.Color = Colors.Black;

            // Márgenes para dejar sitio a etiquetas
            plt.Axes.Margins(left: 180, right: 10, top: 10, bottom: 40);


            // xAxis.Min = xs.Min();
            // xAxis.Max = xs.Max();



            // yLeft.Min = ysLeft.Min();
            // yLeft.Max = ysLeft.Max();

            // yLeft2.Min = ysLeft2.Min();
            // yLeft2.Max = ysLeft2.Max();


            // plt.Legend.IsVisible = true;
            // plt.Legend.Alignment = Alignment.UpperRight;

            // ===== LOGGERS =====
            loggerFlow = plt.Add.DataLogger();
            loggerFlow.Axes.YAxis = yLeftFlow;
            loggerFlow.Color = Colors.DodgerBlue;

            loggerSpeed = plt.Add.DataLogger();
            loggerSpeed.Axes.YAxis = yRightSpeed;
            loggerSpeed.Color = Colors.Orange;


            // Datos iniciales
            int count = 3000;
            loggerFlow.Add(walkerFlow.Next(count));
            loggerSpeed.Add(walkerSpeed.Next(count));


            blazorPlot.Refresh();

            AddNewDataTimer = new System.Threading.Timer(
                  e =>
                  {
                      InvokeAsync(() =>
                      {
                          OnTimerCallback();
                      });
                  },
                  null,
                  TimeSpan.Zero,
                  TimeSpan.FromSeconds(1)
                  );

            UpdatePlotTimer = new System.Threading.Timer(
                e =>
                {
                    InvokeAsync(() =>
                    {
                        OnTimerCallback2();
                    });
                },
                null,
                TimeSpan.Zero,
                TimeSpan.FromSeconds(1)
                );
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private Task OnTimerCallback()
    {
        const int count = 5;
        loggerFlow?.Add(walkerFlow.Next(count));
        loggerSpeed?.Add(walkerSpeed.Next(count));
        return Task.CompletedTask;
    }

    private Task OnTimerCallback2()
    {
        blazorPlot.Refresh();
        return Task.CompletedTask;
    }
}
